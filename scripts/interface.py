#!/usr/bin/env python3
## interface generated by gen_dbc_interface.py

from abc import ABC, abstractmethod

class DbcInterface(ABC):
    @abstractmethod
    async def request(self, msg_name: str, timeout: float = 0.5) -> dict:
        pass

    async def get_motor_error(self) -> dict:
        return await self.request("Get_Motor_Error")

    async def get_encoder_error(self) -> dict:
        return await self.request("Get_Encoder_Error")

    async def get_sensorless_error(self) -> dict:
        return await self.request("Get_Sensorless_Error")

    async def get_encoder_estimates(self) -> dict:
        return await self.request("Get_Encoder_Estimates")

    async def get_encoder_count(self) -> dict:
        return await self.request("Get_Encoder_Count")

    async def get_iq(self) -> dict:
        return await self.request("Get_Iq")

    async def get_sensorless_estimates(self) -> dict:
        return await self.request("Get_Sensorless_Estimates")

    async def get_bus_voltage_current(self) -> dict:
        return await self.request("Get_Bus_Voltage_Current")

    async def get_adc_voltage(self) -> dict:
        return await self.request("Get_ADC_Voltage")

    async def get_controller_error(self) -> dict:
        return await self.request("Get_Controller_Error")
