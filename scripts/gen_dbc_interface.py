#!/usr/bin/env python3
"""
 Generate interface from dbc file

 Copyright (c) 2023 ROX Automation - Jev Kuznetsov
"""

from pathlib import Path
import cantools
from odrive_can import get_dbc

script_name = Path(__file__).name

HEADER = """#!/usr/bin/env python3
## interface generated by {script_name}

from abc import ABC, abstractmethod

class DbcInterface(ABC):
    @abstractmethod
    async def request(self, msg_name: str, timeout: float = 0.5) -> dict:
        pass
"""


GET_TEMPLATE = """
    async def {method_name}(self) -> dict:
        return await self.request("{param}")\n"""


def split_message_name(message_name: str) -> tuple[str, str, str | None]:
    """split to axis, method_name, prefix (get/set)"""
    axis, method_name = message_name.split("_", 1)

    if method_name.lower().startswith("get"):
        prefix = "get"

    elif method_name.lower().startswith("set"):
        prefix = "set"

    else:
        prefix = None

    return axis, method_name, prefix


def get_method(message: cantools.db.Message) -> str:
    """get method string"""
    _, method_name, _ = split_message_name(message.name)

    code = GET_TEMPLATE.format(method_name=method_name.lower(), param=method_name)

    return code


def dbc_to_code(db, dest):
    """create interface from dbc database"""

    print(f"Generating {dest}")
    # Open the Markdown file for writing
    with open(dest, "w", encoding="utf8") as output_file:
        # Write a header
        code = HEADER.format(script_name=script_name)
        output_file.write(code)

        for message in db.messages[:28]:
            # split message name by first underscore

            print(f"Processing {message.name}")
            _, _, prefix = split_message_name(message.name)

            if prefix == "get":
                code = get_method(message)
                print(code)
                output_file.write(code)


db = get_dbc("odrive-cansimple-0.5.6")
dbc_to_code(db, "interface.py")
